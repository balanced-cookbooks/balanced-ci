export BALANCED_ENV=test
PYENV_HOME=$WORKSPACE/.pyenv/

# Consistent environments are more consistent
source /etc/profile

REBUILD_VIRTUALENV=0
REQ_FILES="requirements.txt test-requirements.txt requirements-test.txt"

for req in $REQ_FILES setup.py; do    # Don't execute setup.py, but track it
    LAST_REQUIREMENTS="$WORKSPACE/../<%= @new_resource.name %>-$req"
    REQS="$WORKSPACE/<%= @new_resource.project_prefix %>$req"
    if [ -e $REQS ]; then
        if [ ! -e $LAST_REQUIREMENTS ] || ! diff -aq $LAST_REQUIREMENTS $REQS; then
            REBUILD_VIRTUALENV=1
        fi
        cp $REQS $LAST_REQUIREMENTS
    fi
done

if [ -d $PYENV_HOME ] && [ $REBUILD_VIRTUALENV -ne 0 ]; then
    rm -rf $PYENV_HOME
fi

virtualenv $PYENV_HOME
. $PYENV_HOME/bin/activate

for req in $REQ_FILES; do
    if [ -e $WORKSPACE/<%= @new_resource.project_prefix %>$req ]; then
        pip install -r $WORKSPACE/<%= @new_resource.project_prefix %>$req
    fi
done

if [ -e $WORKSPACE/<%= @new_resource.project_prefix %>setup.py ]; then
    if [ -z "<%= @new_resource.project_prefix %>" ]
    then
        pushd $WORKSPACE && pip install . && popd;
    else
        pushd $WORKSPACE/<%= @new_resource.project_prefix %> && pip install . && popd;
    fi
fi

# coverage needs to be FIRST before all the other plugins
# because we only need this ONE coverage version pinned
# all the other plugins after the coverage plugin require
# basically coverage>=3.4
pip install blumpkin
pip install coverage==3.5.3
# https://github.com/Ignas/nose_xunitmp/pull/1#issuecomment-37597514
pip install nose==1.3.0
pip install nosexcover==1.0.10
pip install nose-cov==1.6
pip install nose_xunitmp==0.3.1
pip install pep8 pylint --upgrade
pip install lxml
# https://github.com/schlamar/cov-core recently messed up their code
# this is an old version but it's known to work.
pip install cov-core==1.8

find $WORKSPACE -path $PYENV_HOME -prune -o -name "*.pyc" -print0 | xargs -0 rm

# Rebuild test db if necessary/possible
REBUILD_SCRIPTS="scripts/recreate-test"
for script in $REBUILD_SCRIPTS; do
    if [ -e $WORKSPACE/<%= @new_resource.project_prefix %>$script ]; then
        $WORKSPACE/<%= @new_resource.project_prefix %>$script
        break
    fi
done

<%= @new_resource.test_command %>

coverage combine
coverage report
coverage xml

# Pylint
$PYENV_HOME/bin/pylint --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"  \
          --reports=n \
          --disable=I \
          --disable=R0904,R0201,R0903,E1101,C0111,W0232,C0103,W0142,W0201,W0511,E1002,E1103,W0403,R0801 \
          --generated-members= \
          --ignore-iface-methods= \
          --dummy-variables-rgx= <%= @new_resource.project_prefix %><%= @new_resource.python_package %>/ \
    | tee pylint.out

# Pep8
find <%= @new_resource.project_prefix %><%= @new_resource.python_package %> -name \*.py \
    | xargs $PYENV_HOME/bin/pep8 --ignore=E711 \
    | tee pep8.out
